Index: app/src/main/java/com/example/sample_app/Model/View/Home.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sample_app.Model.View\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.icu.text.SimpleDateFormat\nimport android.location.LocationManager\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Looper\nimport android.provider.Settings\nimport android.util.Log\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.annotation.RequiresApi\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.LinearOutSlowInEasing\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.DrawerValue\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.rememberDrawerState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.MutableState\nimport androidx.compose.runtime.SideEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.Font\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Dialog\nimport androidx.compose.ui.window.DialogProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.example.sample_app.Constant\nimport com.example.sample_app.Model.MainCardModel\nimport com.example.sample_app.Model.ResponseModel.AttendanceCurrentDateData\nimport com.example.sample_app.Model.ResponseModel.AttendenceCurrentDateResponseModel\nimport com.example.sample_app.Model.ResponseModel.GeoResponseModel\nimport com.example.sample_app.Model.ResponseModel.Geodata\nimport com.example.sample_app.Model.ResponseModel.HolidayData\nimport com.example.sample_app.Model.ResponseModel.ckindata\nimport com.example.sample_app.R\nimport com.example.sample_app.SharedPreferenceManager\nimport com.example.sample_app.components.AppScaffold\nimport com.example.sample_app.components.BottomNav\nimport com.example.sample_app.components.DrawerContent\nimport com.example.sample_app.components.TopBar\nimport com.example.sample_app.viewModel.AttendanceViewModel\nimport com.example.sample_app.viewModel.LoginViewModel\nimport com.example.sample_app.viewModel.UserDataViewModel\nimport com.example.sample_app.viewModel.MainViewModel\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationCallback\nimport com.google.android.gms.location.LocationRequest\nimport com.google.android.gms.location.LocationResult\nimport com.google.android.gms.location.LocationServices\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport org.json.JSONArray\nimport org.json.JSONObject\nimport java.util.Date\nimport java.util.concurrent.ExecutorService\nimport java.util.concurrent.Executors\n\nvar lats = 0.0\nvar longs = 0.0\nlateinit var locationProvider: FusedLocationProviderClient\nvar geodetails = ArrayList<Geodata>()\nvar checkinflag = \"\"\n\nlateinit var cameraExecutor: ExecutorService\nvar shouldShowCamera: MutableState<Boolean> = mutableStateOf(false)\nlateinit var photoUri: Uri\nvar round = 1\nval showload1: MutableState<Boolean> = mutableStateOf(false)\n\nlateinit var userViewModel: UserDataViewModel\nlateinit var loginViewModel: LoginViewModel\n//private val openDialog2 : MutableState<Boolean> = mutableStateOf(false)\n\n\n@SuppressLint(\"CoroutineCreationDuringComposition\")\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HomeScreen(\n    navController: NavController,\n    viewModel: MainViewModel,\n    loginViewModel1: LoginViewModel,\n    userViewModel1: UserDataViewModel\n) {\n//    val isLoggedIn = remember { mutableStateOf(true) }\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n    loginViewModel = loginViewModel1\n    userViewModel = userViewModel1\n\n    AppScaffold(\n        navController = navController,\n        drawerState = drawerState,\n        topBarContent = {\n            TopBar(\n                navController = navController,\n                title = userViewModel.getDivisionName(),\n                drawerState = drawerState\n            )\n        },\n        drawerContent = { DrawerContent(navController = navController) },\n        bottomBarContent = {\n//            if (isLoggedIn.value) {\n            BottomNav(navController)\n//            }\n        })\n    {\n        Home(\n            navController = navController,\n            viewModel = viewModel,\n            loginViewModel = loginViewModel,\n            userViewModel = userViewModel\n        )\n    }\n}\n\n@SuppressLint(\n    \"SuspiciousIndentation\", \"CoroutineCreationDuringComposition\",\n    \"UnrememberedMutableState\", \"AutoboxingStateCreation\"\n)\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun Home(\n    navController: NavController,\n    viewModel: MainViewModel,\n    loginViewModel: LoginViewModel,\n    userViewModel: UserDataViewModel\n) {\n    Log.d(\"HOMEScreen\", \"Recomposition\")\n    val context = LocalContext.current\n    val lifecycleOwner = LocalLifecycleOwner.current\n    val empID = userViewModel.getSFCode()\n\n    if (empID.isEmpty()) {\n        showload1.value = true\n    } else {\n//            SharedPreferenceManager.setCheckInOut(context, \"\")\n\n        getCheckinDetails1(\n            context,\n            lifecycleOwner,\n            viewModel,\n            navController,\n            empID\n        ) { dataList ->\n            val checkInDetailsList = dataList ?: emptyList()\n            val flag = checkInDetailsList.firstOrNull()?.flag ?: -1\n            checkinflag = when (flag) {\n                1 -> \"ckout\"\n                0 -> \"ckout\"\n                else -> \" \"\n            }\n            SharedPreferenceManager.setCheckInOut(context, checkinflag)\n            val checkIn1 = SharedPreferenceManager.getCheckInOut(context)\n            Log.d(\"Home_checkIn\", \"from SharedPreferenceManager round $round-----$checkIn1\")\n            round += 1\n        }\n\n        if (userViewModel.hasShiftSelection()) {\n            getShiftDetails(context, lifecycleOwner, viewModel, empID)\n        }\n\n        showload1.value = false\n    }\n\n    HomeDetails(\n        viewModel = viewModel,\n        userViewModel = userViewModel,\n        loginViewModel = loginViewModel,\n        navController = navController\n    )\n}\n\n@SuppressLint(\"StateFlowValueCalledInComposition\")\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HomeDetails(\n    viewModel: MainViewModel,\n    userViewModel: UserDataViewModel,\n    loginViewModel: LoginViewModel,\n    navController: NavController\n) {\n    val lifecycleOwner = LocalLifecycleOwner.current\n    val context = LocalContext.current\n\n    var imageUri by remember { mutableStateOf<Uri?>(null) }\n\n    val launcherMultiplePermissions1 = rememberLauncherForActivityResult(\n        ActivityResultContracts.RequestMultiplePermissions()\n    ) { permissionsMap ->\n        if (permissionsMap.isNotEmpty()) {\n            val areGranted =\n                permissionsMap.values.reduce { acc, next -> acc && next }\n            if (areGranted) {\n                Constant.showToast(context, \"Permission Granted\")\n            } else {\n                Constant.showToast(context, \"Permission Denied\")\n            }\n        }\n    }\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(color = colorResource(id = R.color.backgroundColor))\n            .padding(top = 80.dp, bottom = 55.dp, start = 20.dp, end = 20.dp)\n            .verticalScroll(rememberScrollState())\n    ) {\n        var geoDetailsList: List<Geodata>\n\n//--------------------------------------------------------------------------------------------------------------------------------\n\n\n        Row(\n            modifier = Modifier.fillMaxWidth(1f),\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n            Column {\n                Text(\n                    text = \"Shift Time\",\n                    color = colorResource(id = R.color.black),\n                    style = MaterialTheme.typography.titleSmall\n                )\n                Text(\n                    text = \"10:00:00 - 19:30:00\",\n                    color = colorResource(id = R.color.paraColor),\n                    style = MaterialTheme.typography.labelSmall\n                )\n            }\n            Column {\n\n                val checkIn = SharedPreferenceManager.getCheckInOut(context)\n                Log.d(\"Home1_checkIn\", \"from SharedPreferenceManager-----$checkIn\")\n\n                val color =\n                    if (checkIn == \"ckout\") colorResource(id = R.color.red) else if (checkIn == \"ckin\") colorResource(\n                        id = R.color.green\n                    ) else colorResource(id = R.color.backgroundColor)\n                val buttonText1 =\n                    if (checkIn == \"ckout\") \"Check Out\" else if (checkIn == \"ckin\") \"Check In\" else \"\"\n\n                val onclickFun = {\n                    if (checkinflag == \"ckin\") {\n                        if (userViewModel.hasGeoFencing()) {\n                            getGeoDetails(\n                                context,\n                                lifecycleOwner,\n                                viewModel,\n                                userViewModel.getSFCode()\n                            ) { dataList ->\n                                geoDetailsList = dataList ?: emptyList()\n                                Log.d(\n                                    \"Home_checkIn\",\n                                    \"from geoDetailsList-----$geoDetailsList\"\n                                )\n                                if (geoDetailsList.isEmpty()) {\n                                    Constant.showToast(\n                                        context,\n                                        \"Fencing enabled but no bounds found...\"\n                                    )\n                                } else {\n                                    val fenceDistance = viewModel.checkDistance(geoDetailsList)\n                                    if (fenceDistance > 0) {\n                                        if (userViewModel.hasShiftSelection()) {\n                                            if (shiftlistdetails.isEmpty()) {\n                                                Constant.showToast(\n                                                    context,\n                                                    \"Shift Enabled but no shift mapped...\"\n                                                )\n                                            } else {\n                                                loginViewModel.navigateToShiftSelection()\n                                            }\n                                        } else {\n                                            if (userViewModel.isImageCaptureNeed()) {\n                                                requestPermissions(context = context) { per ->\n                                                    launcherMultiplePermissions1.launch(\n                                                        per\n                                                    )\n                                                }\n                                            } else if (userViewModel.hasLocationCheckNeed()) {\n                                                Constant.showToast(\n                                                    context = context,\n                                                    \"Fetching Location\"\n                                                )\n                                                loginViewModel.navigateToCurrentLocation()\n                                                // showload = false\n\n                                            } else {\n                                                showload1.value = true\n                                                submitCheckin3(\n                                                    context,\n                                                    lifecycleOwner,\n                                                    navController,\n                                                    viewModel\n                                                )\n                                            }\n                                        }\n                                    } else if (lats == 0.0) {\n                                        Constant.showToast(\n                                            context,\n                                            \"Location not Fetched,Please Try Again after 10 seconds\"\n                                        )\n                                    } else {\n                                        Constant.showToast(\n                                            context,\n                                            \"You are out of bounds from the headquarters or Working place\"\n                                        )\n                                    }\n                                }\n                            }\n\n                        } else {\n                            if (userViewModel.hasShiftSelection()) {\n                                if (shiftlistdetails.isEmpty()) {\n                                    Constant.showToast(\n                                        context,\n                                        \"Shift Enabled but no shift mapped...\"\n                                    )\n                                } else {\n                                    loginViewModel.navigateToShiftSelection()\n//                                    navController.navigate(\"ShiftSelection\") { popUpTo(\"ShiftSelection\") }\n                                }\n                            } else {\n\n                                if (userViewModel.isImageCaptureNeed()) {\n                                    requestPermissions(context = context) { per ->\n                                        launcherMultiplePermissions1.launch(\n                                            per\n                                        )\n                                    }\n                                } else if (userViewModel.hasLocationCheckNeed()) {\n                                    Constant.showToast(\n                                        context = context,\n                                        \"Fetching Location\"\n                                    )\n                                    loginViewModel.navigateToCurrentLocation()\n                                    // showload = false\n\n                                } else {\n                                    showload1.value = true\n                                    submitCheckin3(\n                                        context,\n                                        lifecycleOwner,\n                                        navController,\n                                        viewModel\n                                    )\n                                }\n                            }\n                        }\n                    } else {\n                        if (userViewModel.hasGeoFencing()) {\n                            getGeoDetails(\n                                context,\n                                lifecycleOwner,\n                                viewModel,\n                                userViewModel.getSFCode()\n                            ) { dataList ->\n                                geoDetailsList = dataList ?: emptyList()\n                                Log.d(\n                                    \"Home_checkOut\",\n                                    \"from geoDetailsList-----$geoDetailsList\"\n                                )\n                                if (geoDetailsList.isNullOrEmpty()) {\n                                    Constant.showToast(\n                                        context,\n                                        \"Fencing enabled but no bounds found\"\n                                    )\n                                } else {\n                                    val fencedCheckOut = viewModel.checkDistance(geoDetailsList)\n                                    if (fencedCheckOut > 0) {\n                                        if (userViewModel.isImageCaptureNeed()) {\n                                            requestPermissions(context = context) { per ->\n                                                launcherMultiplePermissions1.launch(\n                                                    per\n                                                )\n                                            }\n                                        } else if (userViewModel.hasLocationCheckNeed()) {\n                                            loginViewModel.navigateToCurrentLocation()\n                                        } else {\n                                            showload1.value = true\n                                            submitcheckout(\n                                                context,\n                                                lifecycleOwner,\n                                                navController,\n                                                viewModel\n                                            )\n                                        }\n                                    } else if (lats == 0.0) {\n                                        Constant.showToast(\n                                            context,\n                                            \"Location not Fetched,Please Try Again\"\n                                        )\n                                    } else {\n                                        Constant.showToast(\n                                            context,\n                                            \"You are out of bounds from the headquarters or Working place\"\n                                        )\n                                    }\n                                }\n                            }\n                        } else {\n                            // Log.d(\"useride\",checkinflag)\n                            if (userViewModel.isImageCaptureNeed()) {\n                                requestPermissions(context = context) { per ->\n                                    launcherMultiplePermissions1.launch(\n                                        per\n                                    )\n                                }\n                            } else if (userViewModel.hasLocationCheckNeed()) {\n                                loginViewModel.navigateToCurrentLocation()\n                            } else {\n                                showload1.value = true\n                                submitcheckout(\n                                    context,\n                                    lifecycleOwner,\n                                    navController,\n                                    viewModel\n                                )\n                            }\n                        }\n                    }\n                }\n//              shift time button\n                if (userViewModel.isMobileCheckIn()) {\n                    Button(\n                        onClick = { onclickFun() },\n                        colors = ButtonDefaults.buttonColors(containerColor = color),\n                        shape = RoundedCornerShape(5.dp)\n                    ) {\n                        Text(\n                            text = buttonText1,\n                            color = colorResource(id = R.color.white),\n                            style = MaterialTheme.typography.labelSmall\n                        )\n                    }\n                }\n//                if (geofencingnd == \"1\" || locbsdchknd == 1) {\n                if (userViewModel.hasGeoFencing() || userViewModel.hasLocationCheckNeed()) {\n                    //  Constant.showToast(context,mobilein)\n\n                    val permissions = arrayOf(\n                        Manifest.permission.ACCESS_COARSE_LOCATION,\n                        Manifest.permission.ACCESS_FINE_LOCATION\n                    )\n\n                    val launcherMultiplePermissions = rememberLauncherForActivityResult(\n                        ActivityResultContracts.RequestMultiplePermissions()\n                    ) { permissionsMap ->\n                        if (permissionsMap.isNotEmpty()) {\n                            val areGranted =\n                                permissionsMap.values.reduce { acc, next -> acc && next }\n                            if (areGranted) {\n                                Constant.showToast(context, \"Permission Granted\")\n                            } else {\n                                Constant.showToast(context, \"Permission Denied\")\n                            }\n                        }\n                    }\n\n                    if (permissions.all {\n                            ContextCompat.checkSelfPermission(\n                                context,\n                                it\n                            ) == PackageManager.PERMISSION_GRANTED\n                        }) {\n                        // Get the location\n                        if (isLocationEnabled(context = context)) {\n//                            if (geofencingnd == \"1\" || locbsdchknd == 1) {\n                            if (userViewModel.hasGeoFencing() || userViewModel.hasLocationCheckNeed()) {\n                                locationProvider =\n                                    LocationServices.getFusedLocationProviderClient(context)\n                                val locationRequest =\n                                    LocationRequest().setInterval(2000).setFastestInterval(2000)\n                                        .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)\n                                if (ActivityCompat.checkSelfPermission(\n                                        context,\n                                        Manifest.permission.ACCESS_FINE_LOCATION\n                                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                                        context,\n                                        Manifest.permission.ACCESS_COARSE_LOCATION\n                                    ) != PackageManager.PERMISSION_GRANTED\n                                ) {\n                                    return\n                                }\n\n                                locationProvider.requestLocationUpdates(\n                                    locationRequest,\n                                    object : LocationCallback() {\n                                        override fun onLocationResult(locationResult: LocationResult) {\n                                            super.onLocationResult(locationResult)\n                                            for (location in locationResult.locations) {\n                                                lats = location.latitude\n                                                longs = location.longitude\n\n                                            }\n                                            // Things don't end here\n                                            // You may also update the location on your web app\n                                        }\n                                    },\n                                    Looper.getMainLooper()\n                                )\n                            }\n\n                        } else {\n\n                            Constant.showToast(context, \"Please Turn on location\")\n                            val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\n                            context.startActivity(intent)\n                        }\n                    } else {\n                        SideEffect {\n                            launcherMultiplePermissions.launch(permissions)\n                        }\n                    }\n                }\n            }\n\n            if (showload1.value) {\n                Dialog(\n                    onDismissRequest = { showload1.value = false },\n                    DialogProperties(dismissOnBackPress = false, dismissOnClickOutside = false)\n                ) {\n                    Box(\n                        contentAlignment = Alignment.Center,\n                        modifier = Modifier\n                            .size(60.dp)\n                            .background(Color.White, shape = RoundedCornerShape(8.dp))\n                    ) {\n                        CircularProgressIndicator(\n                            modifier = Modifier\n                                .align(\n                                    Alignment.Center\n                                ),\n                            color = colorResource(id = R.color.purple_500)\n                        )\n                    }\n                }\n            }\n\n            if (shouldShowCamera.value) {\n\n                val uri = ComposeFileProvider.getImageUri(context)\n                imageUri = uri\n                navController.navigate(\"CameraScreen\")\n                shouldShowCamera.value = false\n\n            }\n\n            cameraExecutor = Executors.newSingleThreadExecutor()\n\n        }\n\n        ShowTime(userViewModel = userViewModel)\n        ShowHoliday(navController = navController, userViewModel = userViewModel)\n        ShowWeddingBirthWorkCards(navController = navController, userViewModel = userViewModel)\n    }\n}\n\n@Composable\nfun ShowTime(userViewModel: UserDataViewModel) {\n    val attvm = userViewModel.attendanceList.collectAsState()\n    val attendanceViewModel =\n        viewModel { AttendanceViewModel(data = attvm.value) }\n    TodaysTimeLog(viewModel = attendanceViewModel)\n}\n\n@Composable\nfun ShowHoliday(\n    navController: NavController,\n    userViewModel: UserDataViewModel\n) {\n    val holidayData = userViewModel.holidayList.collectAsState()\n    HolidayCard(navController = navController, holidaysList = holidayData.value)\n}\n\n@Composable\nfun ShowWeddingBirthWorkCards(\n    navController: NavController,\n    userViewModel: UserDataViewModel\n) {\n    val wishesData = userViewModel.wishList.collectAsState()\n    if (wishesData.value.isNotEmpty())\n        userViewModel.updateLists()\n\n    ReusableCard(\n        model = MainCardModel.WeddingModel(\n            data = userViewModel.getWeddingWeekList(),\n            onClick = { navController.navigate(\"Wedding\") })\n    )\n\n    ReusableCard(\n        model = MainCardModel.BirthdayModel(\n            data = userViewModel.getBirthDayList(),\n            onClick = { navController.navigate(\"Birthday\") })\n    )\n\n    ReusableCard(\n        model = MainCardModel.WorkAnniversaryModel(\n            data = userViewModel.getWorkingWeekList(),\n            onClick = { navController.navigate(\"Work\") })\n    )\n}\n\nfun requestPermissions(\n    context: Context,\n    callback: (Array<String>) -> Unit\n) {\n    var permissions: Array<String> =\n        emptyArray()\n    if (Build.VERSION.SDK_INT >= 33) {\n\n        permissions = arrayOf(\n\n            Manifest.permission.CAMERA,\n            Manifest.permission.READ_MEDIA_IMAGES,\n\n            )\n    } else {\n        permissions = arrayOf(\n\n            Manifest.permission.CAMERA,\n            Manifest.permission.READ_EXTERNAL_STORAGE,\n            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n        )\n    }\n\n\n    if (permissions.all {\n            ContextCompat.checkSelfPermission(\n                context,\n                it\n            ) == PackageManager.PERMISSION_GRANTED\n        }) {\n\n//        Log.d(\n//            \"data>>>>>\",\n//            \"--\" + imageUri.toString()\n//        )\n        shouldShowCamera.value = true\n    } else {\n        callback(permissions)\n//        launcherMultiplePermissions1.launch(\n//            permissions\n//        )\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun TodaysTimeLog(\n    viewModel: AttendanceViewModel\n) {\n    Log.d(\"TodaysTimeLog\", \"Recomposition ${viewModel.data.size}\")\n//----------------------  EXPANDABLE CARD  ------------------------\n    var expanded by remember { mutableStateOf(false) }\n    Card(modifier = Modifier\n        .fillMaxWidth(1f)\n        .animateContentSize(\n            animationSpec = tween(\n                delayMillis = 300,\n                easing = LinearOutSlowInEasing\n            )\n        )\n        .padding(top = 10.dp),\n        shape = RoundedCornerShape(5.dp),\n        colors = CardDefaults.cardColors(containerColor = colorResource(id = R.color.white)),\n        onClick = { expanded = !expanded }\n    ) {\n        Column(modifier = Modifier.padding(10.dp)) {\n            Row(\n                modifier = Modifier.fillMaxWidth(1f),\n                horizontalArrangement = Arrangement.SpaceBetween\n            ) {\n                Text(\n                    text = \"Today’s Time Log\",\n                    color = colorResource(id = R.color.black),\n                    style = MaterialTheme.typography.titleMedium\n                )\n                Icon(\n                    painterResource(id = R.drawable.baseline_keyboard_arrow_down_24),\n                    contentDescription = \"\",\n                    tint = colorResource(\n                        id = R.color.black\n                    )\n                )\n            }\n\n        }\n        if (!expanded) return@Card\n        Column(\n            modifier = Modifier.padding(\n                top = 5.dp,\n                bottom = 5.dp,\n                start = 10.dp,\n                end = 10.dp\n            )\n        ) {\n            CheckinCheckoutRecord(\n                location = viewModel.getCheckinLocList(),\n                time = viewModel.getCheckinTimeList(),\n                buttonColor = R.color.toolight_green,\n                textColor = R.color.green\n            )\n            CheckinCheckoutRecord(\n                location = viewModel.getCheckoutLocList(),\n                time = viewModel.getCheckoutTimeList(),\n                buttonColor = R.color.toolight_red,\n                textColor = R.color.red\n            )\n        }\n    }\n}\n\n@Composable\nfun CheckinCheckoutRecord(\n    location: List<String>,\n    time: List<String>,\n    buttonColor: Int,\n    textColor: Int\n\n) {\n    Log.d(\"CheckinCheckout\", \"Recomposition\")\n    Row(\n        modifier = Modifier.fillMaxWidth(1f),\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Column {\n            Icon(\n                painterResource(id = R.drawable.location),\n                contentDescription = \"location\",\n                tint = colorResource(\n                    id = R.color.paraColor\n                ),\n                modifier = Modifier\n                    .padding(end = 10.dp)\n                    .width(20.dp)\n                    .height(20.dp)\n            )\n        }\n        Column {\n            for (data in location) {\n                Text(\n                    text = data,\n                    style = MaterialTheme.typography.titleSmall,\n                    color = colorResource(id = R.color.paraColor)\n                )\n            }\n        }\n\n        Column(\n            modifier = Modifier.weight(0.5f),\n            horizontalAlignment = Alignment.End\n        ) {\n            Button(\n                onClick = { /*TODO*/ },\n                colors = ButtonDefaults.buttonColors(colorResource(id = buttonColor)),\n                shape = RoundedCornerShape(20),\n                contentPadding = PaddingValues(\n                    top = 3.dp,\n                    bottom = 3.dp,\n                    start = 8.dp,\n                    end = 8.dp\n                )\n            ) {\n                Icon(\n                    painterResource(id = R.drawable.clock_1),\n                    contentDescription = \"clock\",\n                    tint = colorResource(\n                        id = textColor\n                    ),\n                    modifier = Modifier\n                        .padding(end = 10.dp)\n                        .width(15.dp)\n                        .height(15.dp)\n                )\n                for (data in time) {\n                    Text(\n                        text = data,\n                        style = MaterialTheme.typography.titleSmall,\n                        color = colorResource(\n                            id = textColor\n                        )\n                    )\n\n                }\n\n            }\n        }\n    }\n}\n\n@Composable\nfun HolidayCard(\n    navController: NavController,\n    holidaysList: List<HolidayData>\n) {\n    //       holiday card\n    Log.d(\"HolidayCard\", \"Recomposition${holidaysList.size}\")\n    Card(\n        modifier = Modifier\n            .fillMaxWidth(1f)\n            .padding(top = 5.dp, bottom = 5.dp)\n            .height(130.dp),\n\n        shape = RoundedCornerShape(5.dp),\n        colors = CardDefaults.cardColors(\n            containerColor = colorResource(id = R.color.light_blue)\n        )\n    ) {\n//            Column(modifier = Modifier.fillMaxWidth(1f), horizontalAlignment = Alignment.End) {\n//                Icon(painterResource(id = R.drawable.vector1)  , contentDescription = \"\", tint = colorResource(id = R.color.blue))\n//            }\n        Column {\n            Box {\n                Box {\n                    Column(\n                        modifier = Modifier.fillMaxWidth(1f),\n                        horizontalAlignment = Alignment.End\n                    ) {\n                        Icon(\n                            painterResource(id = R.drawable.vector1),\n                            contentDescription = \"\",\n                            tint = colorResource(id = R.color.blue)\n                        )\n                    }\n                }\n                Box(modifier = Modifier.offset(y = 10.dp)) {\n                    Row(\n                        modifier = Modifier\n                            .fillMaxWidth(1f)\n                            .padding(10.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        Column {\n                            Text(\n                                text = \"Holidays\",\n                                color = colorResource(id = R.color.black),\n                                style = MaterialTheme.typography.titleLarge\n                            )\n                        }\n                        Column {\n\n                            Icon(\n                                painterResource(id = R.drawable.baseline_arrow_forward_24),\n                                contentDescription = \"\",\n                                tint = colorResource(id = R.color.black),\n                                modifier = Modifier.clickable {\n                                    navController.navigate(\"Holiday\") {\n                                        popUpTo(\"Holiday\")\n                                    }\n                                })\n\n                        }\n\n                    }\n                }\n                Box(modifier = Modifier.offset(y = 45.dp)) {\n                    Row(\n                        modifier = Modifier\n                            .padding(10.dp)\n                            .fillMaxWidth(1f),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        if (holidaysList.isEmpty()) {\n\n                            Column(modifier = Modifier.fillMaxWidth(1f)) {\n\n                                Icon(\n                                    painterResource(id = R.drawable.noholidays),\n                                    contentDescription = \"ring\",\n                                    tint = colorResource(id = R.color.blue),\n                                    modifier = Modifier\n                                        .align(Alignment.CenterHorizontally)\n                                        .width(35.dp)\n                                        .height(35.dp),\n                                )\n                                Text(\n                                    text = \"No Holidays\",\n                                    style = MaterialTheme.typography.titleMedium,\n                                    color = colorResource(id = R.color.black),\n                                    modifier = Modifier\n                                        .padding(top = 10.dp)\n                                        .align(Alignment.CenterHorizontally)\n                                )\n                            }\n                        } else {\n                            holidaysList.take(2).forEach { holiday ->\n                                Column(\n                                    modifier = Modifier.weight(1f),\n                                    horizontalAlignment = Alignment.Start\n                                ) {\n                                    BasicTextField(\n                                        readOnly = true,\n                                        value = holiday.holiname,\n                                        onValueChange = { /* Handle value change if needed */ },\n                                        textStyle = TextStyle(\n                                            fontSize = 14.sp,\n                                            fontWeight = FontWeight(500),\n                                            fontFamily = FontFamily(Font(R.font.poppins_medium)),\n                                            color = colorResource(id = R.color.black),\n                                        ),\n                                        singleLine = true,\n                                        modifier = Modifier\n                                            .fillMaxWidth()\n                                            .padding(end = 16.dp) // Adjust padding as needed\n                                    )\n\n                                    Text(\n                                        text = \"${holiday.Mname} ${holiday.Date}\",\n                                        color = colorResource(id = R.color.paraColor),\n                                        style = MaterialTheme.typography.labelSmall\n                                    )\n                                }\n                            }\n                        }\n                    }\n\n                }\n                Box(modifier = Modifier.offset(y = 82.dp)) {\n                    Column {\n                        Icon(\n                            painterResource(id = R.drawable.bector2),\n                            contentDescription = \"holiday\",\n                            tint = colorResource(id = R.color.blue)\n                        )\n                    }\n                }\n            }\n\n\n        }\n//            Column {\n//                Icon(painterResource(id = R.drawable.bector2)  , contentDescription = \"holiday\", tint = colorResource(id = R.color.blue))\n//            }\n    }\n}\n\n@Composable\nfun ReusableCard(\n    model: MainCardModel\n) {\n    Log.d(model.title, \"Recomposition ${model.data.size}\")\n    Card(\n        modifier = Modifier\n            .fillMaxWidth(1f)\n            .padding(top = 5.dp, bottom = 5.dp)\n            .height(130.dp),\n        shape = RoundedCornerShape(5.dp),\n        colors = CardDefaults.cardColors(containerColor = colorResource(id = model.bgColor))\n    ) {\n        Box {\n            Box {\n                Column(\n                    modifier = Modifier.fillMaxWidth(1f),\n                    horizontalAlignment = Alignment.End\n                ) {\n                    Icon(\n                        painterResource(id = R.drawable.vector1),\n                        contentDescription = \"\",\n                        tint = colorResource(id = model.iconColor)\n                    )\n                }\n            }\n            Box(modifier = Modifier.offset(y = 10.dp)) {\n                Row(\n                    modifier = Modifier\n                        .fillMaxWidth(1f)\n                        .padding(10.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n                    Text(\n                        text = model.title,\n                        color = colorResource(id = R.color.black),\n                        style = MaterialTheme.typography.titleLarge\n                    )\n                    Icon(\n                        painterResource(id = R.drawable.baseline_arrow_forward_24),\n                        contentDescription = \"\",\n                        tint = colorResource(id = R.color.black),\n                        modifier = Modifier.clickable { model.onClick() })\n\n                }\n            }\n            Box(modifier = Modifier.offset(y = 45.dp)) {\n                Row(\n                    modifier = Modifier\n                        .padding(10.dp)\n                        .fillMaxWidth(1f), horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n                    if (model.data.isEmpty()) {\n\n                        Column(modifier = Modifier.fillMaxWidth(1f)) {\n\n                            Icon(\n                                painterResource(id = model.image),\n                                contentDescription = \"ring\",\n                                tint = colorResource(id = model.iconColor),\n                                modifier = Modifier\n                                    .align(Alignment.CenterHorizontally)\n                                    .width(50.dp)\n                                    .height(50.dp),\n                            )\n                            Text(\n                                text = \"No Wedding Anniversary\",\n                                style = MaterialTheme.typography.titleMedium,\n                                color = colorResource(id = R.color.black),\n                                modifier = Modifier.align(Alignment.CenterHorizontally)\n                            )\n                        }\n                    } else {\n                        model.data.take(2).forEach { event ->\n                            // Sample UI components, customize these based on your data structure\n                            Log.d(\"name event\", event.Name)\n                            Column(\n                                modifier = Modifier.weight(1f),\n                                horizontalAlignment = Alignment.Start\n                            ) {\n                                BasicTextField(\n                                    readOnly = true,\n                                    value = event.Name,\n                                    onValueChange = { /* Handle value change if needed */ },\n                                    textStyle = TextStyle(\n                                        fontSize = 14.sp,\n                                        fontWeight = FontWeight(500),\n                                        fontFamily = FontFamily(Font(R.font.poppins_medium)),\n                                        color = colorResource(id = R.color.black),\n                                    ),\n                                    singleLine = true,\n                                    modifier = Modifier\n                                        .fillMaxWidth()\n                                        .padding(end = 16.dp) // Adjust padding as needed\n                                )\n                                Text(\n                                    text = \"${event.Month} ${event.Date}\",\n                                    color = colorResource(id = R.color.paraColor),\n                                    style = MaterialTheme.typography.labelSmall\n                                )\n                            }\n                        }\n                    }\n\n                }\n\n            }\n            Box(modifier = Modifier.offset(y = 82.dp)) {\n                Column {\n                    Icon(\n                        painterResource(id = R.drawable.bector2),\n                        contentDescription = \"\",\n                        tint = colorResource(id = model.iconColor)\n                    )\n\n                }\n            }\n        }\n    }\n}\n\n\nfun isLocationEnabled(context: Context): Boolean {\n    val locationManager: LocationManager =\n        context.getSystemService(Context.LOCATION_SERVICE) as LocationManager\n    return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationManager.isProviderEnabled(\n        LocationManager.NETWORK_PROVIDER\n    )\n}\n\n@SuppressLint(\"SuspiciousIndentation\")\nfun getGeoDetails(\n    context: Context,\n    lifecycleOwner: LifecycleOwner,\n    viewModel: MainViewModel,\n    empId: String,\n    callback: (List<Geodata>?) -> Unit\n) {\n//    TODO(\"Not yet implemented\")\n    Log.d(\"getGeoDetails... WeddingList\", \"Recomposition\")\n    if (Constant.isNetworkAvailable(context)) {\n        val qryParam: Map<String, String> = HashMap()\n        val postObject = JsonObject()\n        val baseURL = Constant.BASE_URL\n\n\n        postObject.addProperty(\"axn\", \"Get_GeoDetails\")\n        postObject.addProperty(\"sf_Code\", empId)\n\n        viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject, null)\n        viewModel.postDataJsonObjectResponse(postObject)\n            ?.observe(lifecycleOwner, Observer { mgeoList ->\n                val size = mgeoList?.size()\n                if (size != null) {\n                    if ((mgeoList != null) || size > 0) {\n                        Log.d(\"geodetails... \", \"$mgeoList\")\n                        try {\n                            val jsonObject1 = JSONObject(mgeoList.toString())\n                            val success = jsonObject1.getBoolean(\"success\")\n                            val jsonArray1 = jsonObject1.getJSONArray(\"Head\")\n                            Log.d(\"geodetails... geo DETAILS passed\", \"$mgeoList\")\n\n                            val geoDetails2 =\n                                Gson().fromJson(\n                                    jsonArray1.toString(),\n                                    Array<Geodata>::class.java\n                                )\n                                    .toList()\n                            val geoResponseModel =\n                                GeoResponseModel(success, geoDetails2.toList())\n                            val dataList =\n                                geoResponseModel.Head // Assuming 'head' is the correct field name\n                            Log.d(\n                                \"geoResponseModel...\",\n                                \"geoResponseModel DataList : $dataList\"\n                            )\n                            callback(dataList)\n\n                            geodetails.clear()\n                            geodetails = parsegeoDetailItems(jsonArray1)\n                            Log.d(\"geodetails... geo DETAILS get size\", \"---\" + geodetails.size)\n\n                        } catch (e: Exception) {\n                            e.printStackTrace()\n                            Log.d(\"geodetails... geodetails...\", \"$e\")\n                            geodetails.clear()\n                            callback(null)\n                        }\n                    }\n                }\n            })\n    } else {\n        Constant.showToast(context, \"Check Your Internet Connectivity\")\n\n    }\n\n}\n\nfun parsegeoDetailItems(jsonArray: JSONArray): ArrayList<Geodata> {\n    val geoDetailList = ArrayList<Geodata>()\n    for (i in 0 until jsonArray.length()) {\n        val itemObject = jsonArray.getJSONObject(i)\n        val lati = itemObject.getString(\"Latitude\")\n        val longi = itemObject.getString(\"Longitude\")\n        val radi = itemObject.getString(\"Radius\")\n        // Log.d(\"testname\",name)\n        geoDetailList.add(Geodata(lati, longi, radi))\n    }\n    return geoDetailList\n}\n\n@SuppressLint(\"SuspiciousIndentation\")\nfun submitCheckin3(\n    context: Context,\n    lifecycleOwner: LifecycleOwner,\n    navController: NavController,\n    viewModel: MainViewModel\n) {\n    Log.d(\"Checkin3... WeddingList\", \"Recomposition\")\n    if (Constant.isNetworkAvailable(context)) {\n        val qryParam: Map<String, String> = HashMap()\n        val postObject = JsonObject()\n        val postObject2 = JsonObject()\n        val postObject1 = JsonObject()\n        val baseURL = Constant.BASE_URL\n\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n        val currentDateAndTime = sdf.format(Date())\n        val time = currentDateAndTime.split(\"\\\\s\".toRegex()).toTypedArray()\n\n        var selectedshiftid1 = if (selectedshiftid.isEmpty()) {\n            0\n        } else {\n            selectedshiftid.toInt()\n        }\n\n        postObject.addProperty(\"Mode\", \"CIN\")\n        postObject.addProperty(\"Divcode\", userViewModel.getDivisionCode())\n        postObject.addProperty(\"sfCode\", userViewModel.getSFCode())\n        postObject.addProperty(\"Shift_Selected_Id\", selectedshiftid1)\n        postObject.addProperty(\"Shift_Name\", selectedshift)\n        postObject.addProperty(\"ShiftStart\", selectedshiftstime)\n        postObject.addProperty(\"ShiftEnd\", selectedshiftetime)\n        postObject.addProperty(\"ShiftCutOff\", selectedshiftcutoff)\n        postObject.addProperty(\"App_Version\", \"Ver 1.0\")\n        postObject.addProperty(\"WrkType\", \"0\")\n        postObject.addProperty(\"CheckDutyFlag\", \"0\")\n        postObject.addProperty(\"On_Duty_Flag\", \"0\")\n        postObject.addProperty(\"eDate\", currentDateAndTime)\n        postObject.addProperty(\"eTime\", time[1])\n        postObject.addProperty(\"current_address\", \"\")\n        postObject.addProperty(\"lat1\", \"\")\n        postObject.addProperty(\"long\", \"\")\n        postObject.addProperty(\"Lattitude\", \"\")\n        postObject.addProperty(\"Langitude\", \"\")\n        postObject.addProperty(\"iimgSrc\", \"\")\n        postObject.addProperty(\"slfy\", \"\")\n        postObject.addProperty(\"Rmks\", \"\")\n\n        postObject2.add(\"TP_Attendance\", postObject)\n\n\n        postObject1.addProperty(\"axn\", \"dcr/save\")\n        postObject1.addProperty(\"divisionCode\", userViewModel.getDivisionCode())\n        postObject1.addProperty(\"sf_Code\", userViewModel.getSFCode())\n        postObject1.addProperty(\"State_Code\", \"\")\n        postObject1.addProperty(\"design\", \"\")\n        postObject1.add(\"data\", postObject2)\n\n        Log.d(\"Home....\", \"submitcheckin3\")\n\n\n\n\n        viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject1, null)\n        viewModel.postDataJsonObjectResponse(postObject1)\n            ?.observe(lifecycleOwner, Observer { mckin ->\n                val size = mckin?.size()\n                if (size != null) {\n                    if ((mckin != null) || size > 0) {\n                        Log.d(\"uploaddetails... \", \"$mckin\")\n                        try {\n                            var jsonObject1 = JSONObject(mckin.toString())\n                            if (jsonObject1.getBoolean(\"success\")) {\n//                            val sharedPref = context.applicationContext?.getSharedPreferences(\"pref\",0) ?: return@Observer\n//                            with (sharedPref.edit()) {\n//                                putString(\"checkinflag\",checkinflag)\n//                                apply()\n//                            }\n//                            checkinflag = \"\"\n                                checkinflag = \"ckout\"\n                                SharedPreferenceManager.setCheckInOut(context, checkinflag)\n                                selectedshift = \"\"\n                                selectedshiftid = \"\"\n                                selectedshiftstime = \"\"\n                                selectedshiftetime = \"\"\n                                selectedshiftcutoff = \"\"\n                                imageFileName = \"\"\n                                Constant.showToast(context, \"Checkin Successfully done..!\")\n                                navController.navigate(\"HomeScreen\") { popUpTo(\"HomeScreen\") }\n                            }\n\n                        } catch (e: Exception) {\n                            e.printStackTrace()\n                            Log.d(\"shiftdetails... shiftdetails...\", \"$e\")\n\n                        }\n                    }\n                }\n            })\n    } else {\n        Constant.showToast(context, \"Check Your Internet Connectivity\")\n\n    }\n\n}\n\n@SuppressLint(\"SuspiciousIndentation\")\nfun submitcheckout(\n    context: Context,\n    lifecycleOwner: LifecycleOwner,\n    navController: NavController,\n    viewModel: MainViewModel\n) {\n    Log.d(\"Checkout... WeddingList\", \"Recomposition\")\n    if (Constant.isNetworkAvailable(context)) {\n        val qryParam: Map<String, String> = HashMap()\n        val postObject = JsonObject()\n        val postObject1 = JsonObject()\n        val baseURL = Constant.BASE_URL\n\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n        val currentDateAndTime = sdf.format(Date())\n        val time = currentDateAndTime.split(\"\\\\s\".toRegex()).toTypedArray()\n\n        Log.d(\"submitCheckout....\", \"submitcheckout\")\n\n        postObject.addProperty(\"Mode\", \"COUT\")\n        postObject.addProperty(\"Divcode\", userViewModel.getDivisionCode())\n        postObject.addProperty(\"sfCode\", userViewModel.getSFCode())\n        postObject.addProperty(\"eDate\", currentDateAndTime)\n        postObject.addProperty(\"eTime\", time[1])\n        postObject.addProperty(\"current_address\", \"\")\n        postObject.addProperty(\"lat1\", 0.0)\n        postObject.addProperty(\"long\", 0.0)\n        postObject.addProperty(\"Lattitude\", 0.0)\n        postObject.addProperty(\"Langitude\", 0.0)\n        postObject.addProperty(\"iimgSrc\", \"\")\n        postObject.addProperty(\"slfy\", \"\")\n        postObject.addProperty(\"Rmks\", \"\")\n\n\n\n        postObject1.addProperty(\"axn\", \"get/logouttime\")\n        postObject1.addProperty(\"divisionCode\", userViewModel.getDivisionCode())\n        postObject1.addProperty(\"sfCode\", userViewModel.getSFCode())\n        postObject1.addProperty(\"State_Code\", \"\")\n        postObject1.addProperty(\"design\", \"\")\n        postObject1.add(\"data\", postObject)\n\n\n\n        viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject1, null)\n        viewModel.postDataJsonObjectResponse(postObject1)\n            ?.observe(lifecycleOwner, Observer { mckout ->\n                val size = mckout?.size()\n                if (size != null) {\n                    if ((mckout != null) || size > 0) {\n                        Log.d(\"uploaddetails... \", \"$mckout\")\n                        try {\n                            var jsonObject1 = JSONObject(mckout.toString())\n                            if (jsonObject1.getBoolean(\"sucess\")) {\n//                            val sharedPref = context.applicationContext?.getSharedPreferences(\"pref\",0) ?: return@Observer\n//                            with (sharedPref.edit()) {\n//                                putString(\"checkinflag\",checkinflag)\n//                                apply()\n//                            }\n//                            checkinflag = \"\"\n                                checkinflag = \"ckin\"\n                                SharedPreferenceManager.setCheckInOut(context, checkinflag)\n                                Constant.showToast(context, \"Checkout Successfully done..!\")\n                                navController.navigate(\"HomeScreen\") { popUpTo(\"HomeScreen\") }\n                            }\n\n                        } catch (e: Exception) {\n                            e.printStackTrace()\n                            Log.d(\"shiftdetails... shiftdetails...\", \"$e\")\n\n                        }\n                    }\n                }\n            })\n    } else {\n        Constant.showToast(context, \"Check Your Internet Connectivity\")\n\n    }\n\n}\n\nfun parsecheckinDetailItems(jsonArray: JSONArray, context: Context): ArrayList<ckindata> {\n    val ckinDetailList = ArrayList<ckindata>()\n    for (i in 0 until jsonArray.length()) {\n        val itemObject = jsonArray.getJSONObject(i)\n        val ckinflag = itemObject.getInt(\"flag\")\n        val shiftid = itemObject.getInt(\"Shift_Id\")\n        val shiftsttime = itemObject.getString(\"Shift_StartTime\")\n        val shiftedtime = itemObject.getString(\"Shift_EndTime\")\n        val shift_nm = itemObject.getString(\"Shift_Name\")\n        if (ckinflag == 1) {\n            checkinflag = \"ckout\"\n        } else if (ckinflag == 0) {\n            checkinflag = \"ckin\"\n        }\n\n        SharedPreferenceManager.setCheckInOut(context, checkinflag)\n\n        ckinDetailList.add(ckindata(ckinflag, shiftid, shiftsttime, shiftedtime, shift_nm))\n    }\n    return ckinDetailList\n}\n\n\nfun getAttendenceCurrentDateDetail(\n    context: Context,\n    lifecycleOwner: LifecycleOwner,\n    viewModel: MainViewModel,\n    empId: String,\n    callback: (List<AttendanceCurrentDateData>?) -> Unit\n) {\n    Log.d(\"AttendanceCurrentDate... AttendanceList\", \"Inside Attendance\")\n\n    Log.d(\"Attendance... List\", \"Recomposition\")\n    if (!Constant.isNetworkAvailable(context)) {\n        Constant.showToast(context, \"Check Your Internet Connectivity\")\n\n    }\n    val qryParam: Map<String, String> = HashMap()\n    val postObject = JsonObject()\n    val baseURL = Constant.BASE_URL\n\n    Log.d(\"Attendance... AttendanceList\", \"Before calling Attendance API\")\n\n\n    postObject.addProperty(\"axn\", \"AttendanceAPI\")\n    postObject.addProperty(\"sfCode\", empId)\n    viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject, null)\n    viewModel.postDataJsonObjectResponse(postObject)\n        ?.observe(lifecycleOwner) { mAttendanceCurrentDateList ->\n            Log.d(\"Attendance... AttendanceList\", \"After calling Attendance API\")\n\n            if (mAttendanceCurrentDateList == null) {\n                Log.d(\"Attendance... AttendanceList\", \"Return null response\")\n                Constant.showToast(context, \"Please try again!!!\")\n                callback(null)\n            }\n//                if (size != null) {\n            Log.d(\"Attendance... AttendanceList\", \"Response is not null\")\n\n            try {\n\n                val jsonObject1 = JSONObject(mAttendanceCurrentDateList.toString())\n\n                val success = jsonObject1.getBoolean(\"success\")\n\n                if (success) {\n                    val dataJsonArray = jsonObject1.getJSONArray(\"Head\")\n\n                    Log.d(\n                        \"Attendance... AttendanceList\",\n                        \"JsonArray:$dataJsonArray\"\n                    )\n\n                    // Create a Gson instance\n                    val attendanceCurrentDateList = Gson().fromJson(\n                        dataJsonArray.toString(),\n                        Array<AttendanceCurrentDateData>::class.java\n                    )\n                    val attendenceCurrentDateListResponseModel =\n                        AttendenceCurrentDateResponseModel(\n                            success,\n                            attendanceCurrentDateList.toList()\n                        )\n                    if (attendenceCurrentDateListResponseModel != null) {\n                        val dataList = attendenceCurrentDateListResponseModel.Head\n                        Log.d(\n                            \"Attendance... AttendanceList\",\n                            \"DataList : $dataList\"\n                        )\n                        callback(dataList)\n                    } else {\n                        callback(null)\n                    }\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n                callback(null)\n            }\n        }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sample_app/Model/View/Home.kt b/app/src/main/java/com/example/sample_app/Model/View/Home.kt
--- a/app/src/main/java/com/example/sample_app/Model/View/Home.kt	
+++ b/app/src/main/java/com/example/sample_app/Model/View/Home.kt	
@@ -630,7 +630,7 @@
 ) {
     val wishesData = userViewModel.wishList.collectAsState()
     if (wishesData.value.isNotEmpty())
-        userViewModel.updateLists()
+    userViewModel.updateLists()
 
     ReusableCard(
         model = MainCardModel.WeddingModel(
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,4 +1,4 @@
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: app/.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/.idea/gradle.xml b/app/.idea/gradle.xml
--- a/app/.idea/gradle.xml	
+++ b/app/.idea/gradle.xml	
@@ -1,11 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="jbr-17" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/example/sample_app/viewModel/UserDataViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sample_app.viewModel\n\nimport android.content.Context\nimport android.util.Log\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport com.example.sample_app.Constant\nimport com.example.sample_app.Model.ResponseModel.AttendanceCurrentDateData\nimport com.example.sample_app.Model.ResponseModel.AttendenceCurrentDateResponseModel\nimport com.example.sample_app.Model.ResponseModel.HolidayData\nimport com.example.sample_app.Model.ResponseModel.HolidayResponseModel\nimport com.example.sample_app.Model.ResponseModel.UserData\nimport com.example.sample_app.Model.ResponseModel.WishesData\nimport com.example.sample_app.Model.ResponseModel.WishesResponseModel\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport org.json.JSONObject\n\nclass UserDataViewModel(\nprivate val savedStateHandle: SavedStateHandle\n) : ViewModel() {\n    private lateinit var userData: UserData\n\n    val wishList = savedStateHandle.getStateFlow(\"wishList\", emptyList<WishesData>())\n    val holidayList = savedStateHandle.getStateFlow(\"holidayList\", emptyList<HolidayData>())\n    val attendanceList = savedStateHandle.getStateFlow(\"attendanceList\", emptyList<AttendanceCurrentDateData>())\n\n    fun setUserData( data: UserData) {\n        userData = data\n    }\n\n    fun updateLists() {\n        getBirthDayList()\n        getWeddingWeekList()\n        getWorkingWeekList()\n    }\n\n    fun getDivisionName() = userData.Division_Name\n\n    fun getDivisionCode() = userData.Division_Code\n\n    fun isMobileCheckIn() = userData.mobile_check_in == 1\n\n    fun isImageCaptureNeed() = userData.imageCaptureNeed == 1\n\n    fun hasLocationCheckNeed() = userData.LocBasedCheckNeed == 1\n\n    fun hasGeoFencing() = userData.Geo_Fencing == \"1\"\n\n    fun hasShiftSelection() = userData.Shift_Selection == \"1\"\n\n    fun getSFCode() = userData.Sf_code\n\n    fun getOrg() = userData.org\n\n    fun getBirthDayList() = wishList.value.filter { it.Wish == \"B\" }\n//\n    fun getWeddingWeekList() = wishList.value.filter { it.Wish == \"W\" }\n//\n    fun getWorkingWeekList() = wishList.value.filter { it.Wish == \"J\" }\n\n    fun getWishesDetails(\n        context: Context,\n        lifecycleOwner: LifecycleOwner,\n        viewModel: MainViewModel\n    ) {\n\n        Log.d(\"CheckTimemWishesList... WishesList\", \"Recomposition\")\n        if (Constant.isNetworkAvailable(context)) {\n            val qryParam: Map<String, String> = HashMap()\n            val postObject = JsonObject()\n            val baseURL = Constant.BASE_URL\n\n            postObject.addProperty(\"axn\", \"GetWishLoadMoreList\")\n            postObject.addProperty(\"sfCode\", getSFCode())\n            postObject.addProperty(\"id\", getOrg())\n            viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject, null)\n            viewModel.postDataJsonObjectResponse(postObject)\n                ?.observe(lifecycleOwner, Observer { mWishesList ->\n                    val size = mWishesList?.size()\n                    if (size != null) {\n                        if ((mWishesList != null) || size > 0) {\n                            try {\n                                val jsonObject1 = JSONObject(mWishesList.toString())\n                                val success = jsonObject1.getBoolean(\"success\")\n                                if (success) {\n                                    val dataJsonArray = jsonObject1.getJSONArray(\"Head\")\n                                    Log.d(\n                                        \"CheckTimemWishesList... WishesList\",\n                                        \"WishesList JsonArray\"\n                                    )\n\n                                    // Create a Gson instance\n                                    val WishesList = Gson().fromJson(\n                                        dataJsonArray.toString(),\n                                        Array<WishesData>::class.java\n                                    )\n                                    val WishesListResponseModel =\n                                        WishesResponseModel(success, WishesList.toList())\n                                    if (WishesListResponseModel != null) {\n                                        val dataList =\n                                            WishesListResponseModel.Head // Assuming 'head' is the correct field name\n                                        Log.d(\n                                            \"Wedding... WeddingList\",\n                                            \"Wedding DataList : $dataList\"\n                                        )\n                                        savedStateHandle[\"wishList\"] = dataList\n//                                        updateLists()\n//                                        wishList.value = dataList\n//                                        callback(dataList)\n                                    } else {\n//                                        callback(null)\n                                    }\n                                }\n                            } catch (e: Exception) {\n                                e.printStackTrace()\n//                                callback(null)\n                            }\n                        } else {\n                            Log.d(\"Loan getLoanDetails\", \"Return null response\")\n                            Constant.showToast(context, \"Please try again!!!\")\n//                            callback(null)\n                        }\n                    }\n                })\n\n        } else {\n            Constant.showToast(context, \"Check Your Internet Connectivity\")\n        }\n\n    }\n\n    fun getHolidayHomeDetails(\n        context: Context,\n        lifecycleOwner: LifecycleOwner,\n        viewModel: MainViewModel,\n        year: Int\n    ) {\n\n        Log.d(\"CheckTimeHoliday... Holiday\", \"Recomposition\")\n        if (Constant.isNetworkAvailable(context)) {\n            val qryParam: Map<String, String> = HashMap()\n            val postObject = JsonObject()\n            val baseURL = Constant.BASE_URL\n\n            postObject.addProperty(\"axn\", \"GetHolidayList\")\n            postObject.addProperty(\"sfCode\", getSFCode())\n            postObject.addProperty(\"year\", year)\n            viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject, null)\n            viewModel.postDataJsonObjectResponse(postObject)\n                ?.observe(lifecycleOwner, Observer { mHolidayList ->\n\n\n                    val size = mHolidayList?.size()\n                    if (size != null) {\n                        if ((mHolidayList != null) || size > 0) {\n//                            Log.d(\"CheckTimeHoliday... HolidayListDetails\", \"Network call\")\n                            try {\n\n                                val jsonObject1 = JSONObject(mHolidayList.toString())\n                                val dataJsonArray = jsonObject1.getJSONArray(\"data\")\n\n                                Log.d(\"CheckTimeHoliday... Holiday\", \"Network call\")\n\n                                // Create a Gson instance\n                                val holidayList1 = Gson().fromJson(\n                                    dataJsonArray.toString(),\n                                    Array<HolidayData>::class.java\n                                )\n                                val holidayResponseModel =\n                                    HolidayResponseModel(holidayList1.toList())\n                                if (holidayResponseModel != null) {\n                                    savedStateHandle[\"holidayList\"] = holidayResponseModel.data\n//                                    callback(dataList)\n                                } else {\n//                                    callback(null)\n                                }\n                            } catch (e: Exception) {\n                                e.printStackTrace()\n//                                callback(null)\n                            }\n                        } else {\n                            Log.d(\"Holiday getHolidayDetails\", \"Return null response\")\n                            Constant.showToast(context, \"Please try again!!!\")\n//                            callback(null)\n                        }\n                    }\n\n                })\n        } else {\n            Constant.showToast(context, \"Check Your Internet Connectivity\")\n        }\n\n    }\n\n\n    fun getAttendanceCurrentDateDetail(\n        context: Context,\n        lifecycleOwner: LifecycleOwner,\n        viewModel: MainViewModel\n//        empId: String\n    ) {\n//        Log.d(\"AttendanceCurrentDate... Attendance\", \"Inside Attendance\")\n\n//        Log.d(\"Attendance... List\", \"Recomposition\")\n        if (Constant.isNetworkAvailable(context)) {\n            val qryParam: Map<String, String> = HashMap()\n            val postObject = JsonObject()\n            val baseURL = Constant.BASE_URL\n\n            Log.d(\"CheckTimeAttendance... AttendanceList\", \"Before calling Attendance API\")\n\n\n            postObject.addProperty(\"axn\", \"AttendanceAPI\")\n            postObject.addProperty(\"sfCode\", getSFCode())\n            viewModel.postObjectInit(lifecycleOwner, baseURL, qryParam, postObject, null)\n            viewModel.postDataJsonObjectResponse(postObject)\n                ?.observe(lifecycleOwner, Observer { mAttendanceCurrentDateList ->\n//                    Log.d(\"Attendance... AttendanceList\", \"After calling Attendance API\")\n\n                    val size = mAttendanceCurrentDateList?.size()\n                    if (size != null) {\n                        if ((mAttendanceCurrentDateList != null) || size > 0) {\n                            Log.d(\"CheckTimeAttendance... Attendance\", \"Response is not null\")\n\n                            try {\n\n                                val jsonObject1 = JSONObject(mAttendanceCurrentDateList.toString())\n\n                                val success = jsonObject1.getBoolean(\"success\")\n\n                                if (success) {\n                                    val dataJsonArray = jsonObject1.getJSONArray(\"Head\")\n\n                                    Log.d(\n                                        \"Attendance... AttendanceList\",\n                                        \"JsonArray:$dataJsonArray\"\n                                    )\n\n                                    // Create a Gson instance\n                                    val attendanceCurrentDateList = Gson().fromJson(\n                                        dataJsonArray.toString(),\n                                        Array<AttendanceCurrentDateData>::class.java\n                                    )\n                                    val attendenceCurrentDateListResponseModel =\n                                        AttendenceCurrentDateResponseModel(\n                                            success,\n                                            attendanceCurrentDateList.toList()\n                                        )\n                                    if (attendenceCurrentDateListResponseModel != null) {\n                                        val dataList = attendenceCurrentDateListResponseModel.Head\n                                        Log.d(\n                                            \"Attendance... AttendanceList\",\n                                            \"DataList : $dataList\"\n                                        )\n                                        savedStateHandle[\"attendanceList\"] = dataList\n//                                        attendanceList.value = dataList\n//                                        callback(dataList)\n                                    } else {\n//                                        callback(null)\n                                    }\n                                }\n                            } catch (e: Exception) {\n                                e.printStackTrace()\n//                                callback(null)\n                            }\n                        } else {\n                            Log.d(\"Attendance... AttendanceList\", \"Return null response\")\n                            Constant.showToast(context, \"Please try again!!!\")\n//                            callback(null)\n                        }\n                    }\n                })\n        } else {\n            Constant.showToast(context, \"Check Your Internet Connectivity\")\n        }\n    }\n\n}
===================================================================
diff --git a/app/src/main/java/com/example/sample_app/viewModel/UserDataViewModel.kt b/app/src/main/java/com/example/sample_app/viewModel/UserDataViewModel.kt
--- a/app/src/main/java/com/example/sample_app/viewModel/UserDataViewModel.kt	
+++ b/app/src/main/java/com/example/sample_app/viewModel/UserDataViewModel.kt	
@@ -19,19 +19,21 @@
 import org.json.JSONObject
 
 class UserDataViewModel(
-private val savedStateHandle: SavedStateHandle
+    private val savedStateHandle: SavedStateHandle
 ) : ViewModel() {
     private lateinit var userData: UserData
 
     val wishList = savedStateHandle.getStateFlow("wishList", emptyList<WishesData>())
     val holidayList = savedStateHandle.getStateFlow("holidayList", emptyList<HolidayData>())
-    val attendanceList = savedStateHandle.getStateFlow("attendanceList", emptyList<AttendanceCurrentDateData>())
+    val attendanceList =
+        savedStateHandle.getStateFlow("attendanceList", emptyList<AttendanceCurrentDateData>())
 
-    fun setUserData( data: UserData) {
+    fun setUserData(data: UserData) {
         userData = data
     }
 
     fun updateLists() {
+        if (wishList.value.isEmpty()) return
         getBirthDayList()
         getWeddingWeekList()
         getWorkingWeekList()
@@ -56,9 +58,12 @@
     fun getOrg() = userData.org
 
     fun getBirthDayList() = wishList.value.filter { it.Wish == "B" }
-//
+
+    //
     fun getWeddingWeekList() = wishList.value.filter { it.Wish == "W" }
-//
+//    val weddingWeekList = wishList.value.filter { it.Wish == "W" }
+
+    //
     fun getWorkingWeekList() = wishList.value.filter { it.Wish == "J" }
 
     fun getWishesDetails(
